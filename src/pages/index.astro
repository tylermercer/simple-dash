---
import UnsplashBackground from "@components/UnsplashBackground.astro";
import Layout from "@layouts/Base.astro";
import unsplash from "@utils/unsplash";
import type { Random } from "unsplash-js/dist/methods/photos/types";

const photo = (await unsplash.photos.getRandom({ collectionIds: ['tSYIORfdTvs'] })
  .then((result) => {
  if (result.errors) {
    throw new Error(result.errors.join(", "));
  } else {
    return result.response;
  }
})) as Random;

const unsplashUrl = photo.urls.regular;
const unsplashColor = photo.color ?? "#000000";
---

<Layout unsplashColor={unsplashColor}>
  <UnsplashBackground unsplashUrl={unsplashUrl} unsplashColor={unsplashColor}>
    <!--Most of the code after this is horrible ChatGPT code i added from my phone as a POC ðŸ˜…-->
    <dialog id="bookmark-dialog">
      <form class="u-guttered" id="bookmark-form" method="dialog">
        <label>
          Name
          <input type="text" id="bookmark-title" required />
        </label>
        <label>
          URL
          <input type="url" id="bookmark-url" required />
        </label>
        <button type="submit">Add Bookmark</button>
      </form>
    </dialog>
    <div class="u-guttered">
      <ul id="bookmark-list" class="bookmark-list"></ul>
      <button id="add-bookmark">Add</button>
    </div>
  </UnsplashBackground>
</Layout>

<style>
  .bookmark-list {
    list-style-type: none;
    padding: 0;
    margin-top: 0;
    & > :global(.bookmark-item) {
      display: flex;
      justify-content: space-between;
      align-items: baseline;
      margin-bottom: 0.5rem;
    }
  }

  dialog {
    text-shadow: none;
    color: var(--gray-900);
  }
</style>

<script>
  // Select elements
  const form = document.getElementById("bookmark-form") as HTMLFormElement;
  const titleInput = document.getElementById(
    "bookmark-title",
  ) as HTMLInputElement;
  const urlInput = document.getElementById("bookmark-url") as HTMLInputElement;
  const bookmarkList = document.getElementById(
    "bookmark-list",
  ) as HTMLUListElement;
  const dialog = document.getElementById(
    "bookmark-dialog",
  ) as HTMLDialogElement;
  const addBookmarkButton = document.getElementById(
    "add-bookmark",
  ) as HTMLButtonElement;

  type Bookmark = {
    title: string;
    url: string;
  };

  // Load bookmarks from localStorage
  let bookmarks = (JSON.parse(localStorage.getItem("bookmarks") || "[]") ||
    []) as Bookmark[];

  bookmarks.forEach((bookmark, index) => addBookmarkToDOM(bookmark, index));

  // Add a bookmark to the DOM
  function addBookmarkToDOM(bookmark: Bookmark, index: number) {
    const li = document.createElement("li");
    li.className = "bookmark-item";
    li.dataset.index = "" + index;

    const link = document.createElement("a");
    link.href = bookmark.url;
    link.textContent = bookmark.title;

    const deleteButton = document.createElement("button");
    deleteButton.textContent = "Delete";
    deleteButton.addEventListener("click", () => deleteBookmark(index));

    li.appendChild(link);
    li.appendChild(deleteButton);
    bookmarkList.appendChild(li);
  }

  // Remove all child nodes (to re-render the list efficiently)
  function clearList() {
    while (bookmarkList.firstChild) {
      bookmarkList.firstChild.remove();
    }
  }

  // Save bookmarks to localStorage
  function saveBookmarks() {
    localStorage.setItem("bookmarks", JSON.stringify(bookmarks));
  }

  // Add a bookmark
  form.addEventListener("submit", (event) => {
    dialog.close();
    event.preventDefault();
    const title = (titleInput as HTMLInputElement).value.trim();
    const url = (urlInput as HTMLInputElement).value.trim();

    if (title && url) {
      bookmarks.push({ title, url });
      saveBookmarks();
      clearList();
      bookmarks.forEach((bookmark, index) => addBookmarkToDOM(bookmark, index));
      form.reset();
    }
  });

  // Delete a bookmark
  function deleteBookmark(index: number) {
    bookmarks.splice(index, 1);
    saveBookmarks();
    clearList();
    bookmarks.forEach((bookmark, index) => addBookmarkToDOM(bookmark, index));
  }

  addBookmarkButton.addEventListener("click", () => {
    dialog.showModal();
  });
  dialog.addEventListener("close", () => {
    form.reset();
  });
  dialog.addEventListener("click", (event) => {
    if (event.target === event.currentTarget) {
      dialog.close();
    }
  });
</script>
